/**
 * @file Runner.hpp
 *
 * This module declares the Runner class.
 *
 * Â© 2019 by Richard Walters
 */

#include <memory>
#include <string>
#include <vector>

/**
 * This class encapsulates all the details concerned with executing Lua
 * unit tests.
 */
class Runner {
    // Lifecycle Methods
public:
    ~Runner() noexcept;
    Runner(const Runner&) = delete;
    Runner(Runner&&) noexcept;
    Runner& operator=(const Runner&) = delete;
    Runner& operator=(Runner&&) noexcept;

    // Public Methods
public:
    /**
     * This is the constructor of the class.
     */
    Runner();

    /**
     * Execute the given Lua script.
     *
     * @param[in] name
     *     This is the name of the Lua script to execute.
     *
     * @param[in] script
     *     This is the contents Lua script to execute.
     *
     * @return
     *     If there is an error generated by executing the script,
     *     a description of the error is returned.  Otherwise, an
     *     empty string is returned, indicating success.
     */
    std::string LoadScript(
        const std::string& name,
        const std::string& script
    );

    /**
     * Return the names of all Lua tests found.
     *
     * @return
     *     The collection of names of Lua tests found is returned.
     */
    std::vector< std::string > GetTestNames() const;

    // Private properties
private:
    /**
     * This is the type of structure that contains the private
     * properties of the instance.  It is defined in the implementation
     * and declared here to ensure that it is scoped inside the class.
     */
    struct Impl;

    /**
     * This contains the private properties of the instance.
     */
    std::unique_ptr< Impl > impl_;
};
